/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import da.MenuDA;
import da.RestaurantDA;
import domain.Menu;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class scheduleOrder extends javax.swing.JFrame {
     JFrame jfRestaurantMenu = new JFrame();
       JFrame jfOrderMenu = new JFrame();
        JPanel jplOrder = new JPanel(new GridLayout(0,2));
       
       JLabel jlbMenuName = new JLabel("Menu Name");
       String[] menuStrings = {"","Black Forest Cake", "Raspberry Cheese Cake"};
       JComboBox menuList = new JComboBox(menuStrings);
       JLabel jlbQuantity = new JLabel("Quantity");
       String[] quantityStrings = {"", "1", "2", "3", "4"};
       JComboBox quantityList = new JComboBox(quantityStrings);
       
       JLabel jlbMenuName1 = new JLabel("Menu Name");
       String[] menuStrings1 = {"","Black Forest Cake", "Raspberry Cheese Cake"};
       JComboBox menuList1 = new JComboBox(menuStrings1);
       JLabel jlbQuantity1 = new JLabel("Quantity");
       String[] quantityStrings1 = {"", "1", "2", "3", "4"};
       JComboBox quantityList1 = new JComboBox(quantityStrings1);
        
       JLabel jlbMenuName2 = new JLabel("Menu Name");
       String[] menuStrings2 = {"","Black Forest Cake", "Raspberry Cheese Cake"};
       JComboBox menuList2 = new JComboBox(menuStrings2);
       JLabel jlbQuantity2 = new JLabel("Quantity");
       String[] quantityStrings2 = {"", "1", "2", "3", "4"};
       JComboBox quantityList2 = new JComboBox(quantityStrings2);
       JButton jbtConfirm = new JButton("Confirm");
       
        //personal delivery details
       JPanel jpl =new JPanel(new GridLayout(0,2));
       JLabel jlbPrice = new JLabel("Price");
       JTextField jtfPrice = new JTextField();
       JLabel jlbName = new JLabel("Name");
       JTextField jtfName = new JTextField();
       JLabel jlbEmail = new JLabel("Email");
       JTextField jtfEmail = new JTextField();
       JLabel jlbPhone = new JLabel("Contact Number");
       JTextField jtfPhone = new JTextField();
       JLabel jlbAddress = new JLabel("Address");
       JTextField jtfAddress = new JTextField();
       JLabel jlbDeliveryDate = new JLabel("Delivery Date");
        
       DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        //get tomorrow date
        Date tomorrow = new Date(date.getTime() + (1000 * 60 * 60 * 24));
        //get day after tomorrow date
        Date daTomorrow = new Date(date.getTime() + (1000 * 60 * 60 * 24) * 2);
        Date daTomorrowT = new Date(date.getTime() + (1000 * 60 * 60 * 24) * 3);
       String[] dateStrings = {String.valueOf(df.format(tomorrow)), String.valueOf(df.format(daTomorrow)),String.valueOf(df.format(daTomorrowT))};
       JComboBox dateList = new JComboBox(dateStrings); 
       
       JLabel jlbDeliveryTime = new JLabel("Delivery Time");
       String[] timeStrings = {"10:00am", "11:00am", "12:00pm", "1:00pm", "2:00pm", "3:00pm", "4:00pm", "5:00pm", "6:00pm", "7.00pm", "8:00pm"};
       JComboBox timeList = new JComboBox(timeStrings); 
       
       JLabel jlbRemarks = new JLabel("Remarks");
       JTextArea jtfRemarks = new JTextArea();
       JLabel jlbEmpty = new JLabel("");
       JButton jbtPurchase = new JButton("Place Order");
    /**
     * Creates new form scheduleOrder
     */
    public scheduleOrder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        AgilePUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("AgilePU").createEntityManager();
        restaurantQuery = java.beans.Beans.isDesignTime() ? null : AgilePUEntityManager.createQuery("SELECT r FROM Restaurant r");
        restaurantList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : restaurantQuery.getResultList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbRestaurant = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, restaurantList, jtbRestaurant);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${restname}"));
        columnBinding.setColumnName("Restaurant Name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${image}"));
        columnBinding.setColumnName("Image");
        columnBinding.setColumnClass(java.io.Serializable.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${restaddress}"));
        columnBinding.setColumnName("Restaurant Address");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${restphone}"));
        columnBinding.setColumnName("Restaurant Number");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jtbRestaurant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbRestaurantMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtbRestaurant);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtbRestaurantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbRestaurantMouseClicked
        String selectedData = null;
        int[] selectedRow = jtbRestaurant.getSelectedRows();
        int[] selectedColumns = jtbRestaurant.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
          for (int j = 0; j < selectedColumns.length; j++) {
            selectedData = (String) jtbRestaurant.getValueAt(selectedRow[i], selectedColumns[j]);
              
          }
        }
      
       RestaurantDA rDA = new RestaurantDA();
       Restaurant res = new Restaurant();
       res = rDA.getMenu(selectedData);

       ArrayList<Menu> resultList = new ArrayList<Menu>();
       Menu menuItem[] = new Menu[100];
       MenuDA menuDA = new MenuDA();
       
       //menuItem = menuDA.getMenu(res.getRestid());
       
       String[] columnNames = {"Menu ID",
                        "Menu Name",
                        "Decription",
                        "Price"};
       Object[][] data = {};
       
      //  String[] choices = {"1","2", "3","4","5","6"};
    //final JComboBox<String> cb = new JComboBox<String>(choices);
    //cb.setVisible(true);


       DefaultTableModel listTableModel;
        listTableModel = new DefaultTableModel(data, columnNames);
        ResultSet rs = null;
        listTableModel.addRow(new Object[]{"Menu ID", "Menu Name",
                        "Decription",
                        "Price"});
        
         try {
             rs = menuDA.displayRecord(res.getRestid());

            while (rs.next()) {

                listTableModel.addRow(new Object[]{rs.getString(1), rs.getString(3), rs.getString(4), rs.getString(5)});
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        JTable jTable = new JTable(listTableModel);
        
        jTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable.setCellEditor(null);
        jTable.setBounds(400, 400, 400, 400);

       jfRestaurantMenu.add(jTable, BorderLayout.CENTER);

              
       //order details
       
       jbtConfirm.addActionListener(new ButtonListener());
       
       jplOrder.add(jlbMenuName);
       jplOrder.add(menuList);
       jplOrder.add(jlbQuantity);
       jplOrder.add(quantityList);
       jplOrder.add(jlbMenuName1);
       jplOrder.add(menuList1);
       jplOrder.add(jlbQuantity1);
       jplOrder.add(quantityList1);
       jplOrder.add(jlbMenuName2);
       jplOrder.add(menuList2);
       jplOrder.add(jlbQuantity2);
       jplOrder.add(quantityList2);
       jbtConfirm.setBackground(Color.PINK);
       jplOrder.add(jlbEmpty);
       jplOrder.add(jbtConfirm);
       
      //JButton jbtPurchase = JButton("Purchase");
       
       jtfPrice.disable();
       jtfName.disable();
       jtfEmail.disable();
       jtfPhone.disable();
       jtfAddress.disable();
       dateList.disable();
       timeList.disable();
       jtfRemarks.disable();
       
       jpl.add(jlbPrice);
       jpl.add(jtfPrice);
       jpl.add(jlbName);
       jpl.add(jtfName);
       jpl.add(jlbEmail);
       jpl.add(jtfEmail);
       jpl.add(jlbPhone);
       jpl.add(jtfPhone);
       jpl.add(jlbAddress);
       jpl.add(jtfAddress);
       jpl.add(jlbDeliveryDate);
       jpl.add(dateList);
       jpl.add(jlbDeliveryTime);
       jpl.add(timeList);
       jpl.add(jlbRemarks);
       jpl.add(jtfRemarks);
       
       
       jfOrderMenu.add(jplOrder, BorderLayout.CENTER);
       jfOrderMenu.add(jpl, BorderLayout.SOUTH);
       jfOrderMenu.setVisible(true);
       jfOrderMenu.setSize(500,500);
       jfOrderMenu.setTitle("Place Order");
       jfOrderMenu.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       jfOrderMenu.setLocationRelativeTo(null);
       jfRestaurantMenu.setTitle("Menu");
       jfRestaurantMenu.setVisible(true);
       jfRestaurantMenu.setSize(350,200);
       jfRestaurantMenu.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       
    }//GEN-LAST:event_jtbRestaurantMouseClicked

      private class OrderListener implements ActionListener{
        public void actionPerformed(ActionEvent e){
            double price = Double.parseDouble(jtfPrice.getText());
            String name = jtfName.getText();
            String email = jtfEmail.getText();
            String contactNo = jtfPhone.getText();
            String address = jtfAddress.getText();
            String deliveryDate = dateList.getSelectedItem().toString();
            String deliveryTime = timeList.getSelectedItem().toString();
            String remarks = jtfRemarks.getText();
            
            JFrame jfSummary = new JFrame();
            JPanel jpSummary = new JPanel();
           
            jpSummary.add(new JLabel("Order is successfully placed: "));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Order number: O0000010"));
            jpSummary.add(new JLabel("Price = RM " + price));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Name = " + name));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Email = " + email));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Contact Number = " + contactNo));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Address = " + address));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Delivery Date = " + deliveryDate));
            jpSummary.add(jlbEmpty);
            jpSummary.add(new JLabel("Delivery Time = " + deliveryTime));
            jpSummary.add(jlbEmpty);
            jpSummary.add(jlbEmpty);
            jpSummary.setLayout(new BoxLayout(jpSummary, BoxLayout.Y_AXIS));
                    
            jfSummary.add(jpSummary);
            jfSummary.setVisible(true);
            jfSummary.setLocationRelativeTo(null);
            jfSummary.setTitle("Order Summary");
            jfSummary.setSize(500,500);
            
        }
      }
    /**
     * @param args the command line arguments
     */
    
    private class ButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent e){
           double total = 0.0;
            double price = 0.0;
            if (!menuList.getSelectedItem().toString().equals(""))
            {
                int quantity = Integer.parseInt(quantityList.getSelectedItem().toString());
                price = quantity * 89.90;
                total += price;
            }
            if (!menuList1.getSelectedItem().toString().equals("")){
                int quantity = Integer.parseInt(quantityList1.getSelectedItem().toString());
                price = quantity * 89.90;
                total += price;
            }
            if (!menuList2.getSelectedItem().toString().equals("")){
                int quantity = Integer.parseInt(quantityList2.getSelectedItem().toString());
                price = quantity * 89.90;
                total += price;
            }
            if(menuList.getSelectedItem().toString().equals("") && menuList1.getSelectedItem().toString().equals("")
                    && menuList2.getSelectedItem().toString().equals("")){
                JOptionPane.showMessageDialog(null, "Error. Please select at least one to continue");
            }
            if(!menuList.getSelectedItem().toString().equals("") || !menuList1.getSelectedItem().toString().equals("")
                    || !menuList2.getSelectedItem().toString().equals("")){
                  
            jtfPrice.setText(String.format("%.2f", total));
            jtfName.setEnabled(true);
            jtfEmail.setEnabled(true);
            jtfPhone.setEnabled(true);
            jtfAddress.setEnabled(true);
            dateList.setEnabled(true);
            timeList.setEnabled(true);
            jtfRemarks.setEnabled(true);
            
            jbtPurchase.setBackground(Color.pink);
            jpl.add(jlbEmpty);
            jpl.add(jbtPurchase);
           
            jbtPurchase.addActionListener(new OrderListener());
            }
 
        }
        
}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(scheduleOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(scheduleOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(scheduleOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(scheduleOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new scheduleOrder().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager AgilePUEntityManager;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtbRestaurant;
    private java.util.List<ui.Restaurant> restaurantList;
    private javax.persistence.Query restaurantQuery;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
